<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>将棋</title>
</head>
<style>
    #field {
        transform: rotate(0deg);
        /* 中心を基準点に時計回りに回転する */
        margin: 0 auto;
    }

    #field td {
        border: 1px solid black;
        width: 50px;
        height: 50px;
        background-color: #c84;
        text-align: center;
        vertical-align: middle;
        table-layout: fixed;
        padding: 1px 1px 1px 1px;
        font-size: 30px;
        writing-mode: horizontal-tb;
    }

    #field_2 {
        position: absolute;
        width: 200px;
        height: 150px;
        top: 300px;
    }

    #field_2 td {
        border: 1px solid black;
        width: 10px;
        height: 10px;
        background-color: #c84;
        text-align: center;
        vertical-align: middle;
        table-layout: fixed;
        padding: 1px 1px 1px 1px;
        font-size: 20px;
        writing-mode: horizontal-tb;
    }

    #field_1 {
        position: absolute;
        width: 200px;
        height: 150px;
        left: 1100px;
        top: 300px;
    }

    #field_1 td {
        border: 1px solid black;
        width: 10px;
        height: 10px;
        background-color: #c84;
        text-align: center;
        vertical-align: middle;
        table-layout: fixed;
        padding: 1px 1px 1px 1px;
        font-size: 20px;
        writing-mode: horizontal-tb;
    }

    #div_black {
        position: absolute;
        left: 1100px;
        top: 260px;
    }

    #div_red {
        color: #f00;
    }

    #button,
    #button2 {
        display: none;
        /* ボタンを非表示に設定 */
        position: absolute;
        /* ボタンの位置を絶対位置で指定 */
    }
</style>

<body>
    <h1 id="h1">将棋で遊ぶばい</h1>
    <img src="/img/syougi2.jpg" alt="">

    <div id="div_red">空席(後攻)</div>
    <table id="field_1" class="own_piece">
    </table>
    <table id="field">
    </table>
    <div id="div_black">空席(後攻)</div>
    <table id="field_2" class="own_piece">
    </table>
    <button id="button"></button>
    <button id="button2"></button>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const socket = io();
            // ページ読み込み完了後にサーバーにメッセージを送信
            socket.emit('page_loaded_username', { message: "<%= username %>" });

            let ban = document.getElementById('field')
            let My_ban1 = document.getElementById('field_1')
            let My_ban2 = document.getElementById('field_2')
            //ボタンを定義
            let button
            let button2;
            //ボタンを取得
            button = document.getElementById("button")
            button2 = document.getElementById("button2")
            var own_piece = document.getElementsByClassName('own_piece')
            //クライアントに名前を付けるときに使うcount
            let clientcount = 0;

            //ターンを定義(最初は1)
            let turn = 1;


            //ログインしたときここが自分と相手の駒の見え方とタイトルの色が違う
            if (Number("<%= count %>") % 2 === 0) {
                h1 = document.getElementById('h1')
                h1.style.color = "#f00";
                ban.style.transform = "rotate(180deg)"

            }
            else {
                ban.style.transform = "rotate(0deg)"
            }
            //
            let click_step = 0;

            // テーブルで盤面を作成する処理
            for (var x = 0; x < 9; x++) {
                var tr = document.createElement("tr")
                ban.appendChild(tr)
                for (var y = 0; y < 9; y++) {
                    var td = document.createElement("td")
                    tr.appendChild(td)
                }
            }
            //手前の駒
            for (var x = 0; x < 9; x++) {
                ban.rows[6].cells[x].innerText = "歩";
            }
            ban.rows[7].cells[1].innerText = "角";
            ban.rows[7].cells[7].innerText = "飛";
            ban.rows[8].cells[0].innerText = "香";
            ban.rows[8].cells[1].innerText = "桂";
            ban.rows[8].cells[2].innerText = "銀";
            ban.rows[8].cells[3].innerText = "金";
            ban.rows[8].cells[4].innerText = "王";
            ban.rows[8].cells[5].innerText = "金";
            ban.rows[8].cells[6].innerText = "銀";
            ban.rows[8].cells[7].innerText = "桂";
            ban.rows[8].cells[8].innerText = "香";
            //0かいてん
            for (var x = 3; x < 9; x++) {
                for (var y = 0; y < 9; y++) {
                    ban.rows[x].cells[y].style.transform = "rotate(0deg)"
                }
            }

            //奥の駒
            for (var x = 0; x < 9; x++) {
                ban.rows[2].cells[x].innerText = "歩";
            }
            ban.rows[1].cells[1].innerText = "飛";
            ban.rows[1].cells[7].innerText = "角";
            ban.rows[0].cells[0].innerText = "香";
            ban.rows[0].cells[1].innerText = "桂";
            ban.rows[0].cells[2].innerText = "銀";
            ban.rows[0].cells[3].innerText = "金";
            ban.rows[0].cells[4].innerText = "王";
            ban.rows[0].cells[5].innerText = "金";
            ban.rows[0].cells[6].innerText = "銀";
            ban.rows[0].cells[7].innerText = "桂";
            ban.rows[0].cells[8].innerText = "香";


            //奥の駒を回転
            for (var x = 0; x < 3; x++) {
                for (var y = 0; y < 9; y++) {
                    ban.rows[x].cells[y].style.transform = "rotate(180deg)"
                }
            }


            //奥の持ち駒
            for (var x = 0; x < 5; x++) {
                var tr = document.createElement("tr")
                My_ban1.appendChild(tr)
                for (var y = 0; y < 5; y++) {
                    var td = document.createElement("td")
                    tr.appendChild(td)
                }
            }
            //手前の持ち駒
            for (var x = 0; x < 5; x++) {
                var tr = document.createElement("tr")
                My_ban2.appendChild(tr)
                for (var y = 0; y < 5; y++) {
                    var td = document.createElement("td")
                    tr.appendChild(td)
                }
            }
            //click処理(効率化に成功)
            ban.onclick = function () {
                let x = event.target.parentNode.rowIndex;
                let y = event.target.cellIndex;
                socket.emit("ban_click", x, y, turn)
            }

            //持ち駒のクリック処理(効率化に成功)
            own_piece[0].onclick = function () {
                let x = event.target.parentNode.rowIndex;
                let y = event.target.cellIndex;
                socket.emit("own_piece", x, y, this.id, turn)
            };
            //持ち駒のクリック処理(効率化に成功)
            own_piece[1].onclick = function () {
                let x = event.target.parentNode.rowIndex;
                let y = event.target.cellIndex;
                socket.emit("own_piece", x, y, this.id, turn)
            };

            //

            //ボタン1をclick
            button.addEventListener("click", function () {
                socket.emit("button")
            })
            //ボタン2をclick
            button2.addEventListener("click", function () {
                socket.emit("button2")
            })
            //フォームのデータを受け取る
            socket.on("formdata", (formnames) => {
                formnames.forEach((formname) => {
                    clientcount++
                    if (clientcount % 2 === 0) {
                        let div_red = document.getElementById("div_red")
                        div_red.innerText = `${formname}(後攻)の持ち駒だよ!!`
                    } else {
                        let div_black = document.getElementById("div_black")
                        div_black.innerText = `${formname}(先行)の持ち駒だよ!!`
                    }
                })
                clientcount = 0;
            })
            //banから動かす処理
            socket.on("ban_click_res", (ban_x, ban_y) => {
                click_step++
                if (click_step == 1) {
                    ban.rows[ban_x].cells[ban_y].style.backgroundColor = '#CCFFFF'; //背景色を変更
                    ban.rows[ban_x].cells[ban_y].style.border = '1px solid #FF0000'; //枠の色を変更
                    first_choice_piece = ban.rows[ban_x].cells[ban_y];
                }
                if (click_step == 2) {
                    //行先のマスに駒があるかチェック
                    get_check(ban.rows[ban_x].cells[ban_y]);
                    //最初に選択された駒の角度が0度のときは次に選択されたマスは0度
                    if (first_choice_piece.style.transform === "rotate(0deg)" || first_choice_piece.id === "field_td1") {
                        ban.rows[ban_x].cells[ban_y].style.transform = "rotate(0deg)";
                    }
                    //最初に選択された駒の角度が180度のときは次に選択されたマスは180度
                    if (first_choice_piece.style.transform === "rotate(180deg)" || first_choice_piece.id === "field_td2") {
                        ban.rows[ban_x].cells[ban_y].style.transform = "rotate(180deg)";
                    }
                    ban.rows[ban_x].cells[ban_y].innerText = first_choice_piece.innerText;  //次の座標にコピー
                    //成りの処理
                    outer:
                    if (first_choice_piece.style.transform === "rotate(0deg)") {
                        for (var x = 0; x < 3; x++) {
                            for (var y = 0; y < 9; y++) {
                                //相手の陣地に入ったかと自分の状態(成っていない)のときは処理が走る!または相手の陣地にもういるときでなっていないときも処理が走る
                                if (ban.rows[ban_x].cells[ban_y] === ban.rows[x].cells[y] && !(first_choice_piece.style.color === "rgb(255, 0, 0)")
                                    || first_choice_piece === ban.rows[x].cells[y] && !(first_choice_piece.style.color === "rgb(255, 0, 0)")) {
                                    // ボタンを表示させる
                                    button.style.display = 'block';
                                    button2.style.display = 'block';
                                    //セルの横にボタンを表示
                                    button.style.left = `1000px`; // 
                                    button.style.top = `450px`;
                                    button2.style.left = `1000px`; // 
                                    button2.style.top = `500px`;
                                    button.innerText = "はい";
                                    button2.innerText = "いいえ";

                                    break outer;
                                }
                            }
                        }
                    }
                    outer:
                    if (first_choice_piece.style.transform === "rotate(180deg)") {
                        for (var x = 6; x < 9; x++) {
                            for (var y = 0; y < 9; y++) {
                                //相手の陣地に入ったかと自分の状態(成っていない)のときは処理が走る!または相手の陣地にもういるときでなっていないときも処理が走る
                                if (ban.rows[ban_x].cells[ban_y] === ban.rows[x].cells[y] && !(first_choice_piece.style.color === "rgb(255, 0, 0)")
                                    || first_choice_piece === ban.rows[x].cells[y] && !(first_choice_piece.style.color === "rgb(255, 0, 0)")) {
                                    // ボタンを表示させる
                                    button.style.display = 'block';
                                    button2.style.display = 'block';
                                    //セルの横にボタンを表示
                                    button.style.left = `1000px`; // 
                                    button.style.top = `450px`;
                                    button2.style.left = `1000px`; // 
                                    button2.style.top = `500px`;
                                    button.innerText = "はい";
                                    button2.innerText = "いいえ";
                                    break outer;
                                }

                            }
                        }
                    }
                    //

                    //選択された駒が成っている駒の場合は次の選択された駒は赤色
                    if (first_choice_piece.style.color === "rgb(255, 0, 0)") {
                        ban.rows[ban_x].cells[ban_y].style.color = '#f00';
                        first_choice_piece.style.color = "#000";

                    }

                    //共通処理
                    saveonce = first_choice_piece.innerText;
                    saveonce2 = ban.rows[ban_x].cells[ban_y]
                    first_choice_piece.innerText = "";
                    first_choice_piece.style.backgroundColor = '#c84';
                    first_choice_piece.style.border = 'none';
                    turn = turn % 2
                    turn++
                    //

                    click_step = 0;

                }

            })//socketの終わり


            //成る関数
            function naru(n) {
                if (n === "歩") {
                    return "と";
                }
                if (n === "飛") {
                    return "龍";
                }
                if (n === "角") {
                    return "竜";
                }
                return n
            }

            //取得をチェックする関数
            function get_check(g) {
                if (!(g.innerText === "")) {
                    console.log("駒あるよ")
                    g.style.color = "#000";
                    if (g.style.transform === "rotate(180deg)") {
                        console.log("ここの処理が走るよ")
                        //繰り返して自分の持ち駒を調べる処理
                        for (var x = 0; x < 5; x++) {
                            for (var y = 0; y < 5; y++) {
                                if (My_ban1.rows[x].cells[y].innerText === "") {
                                    My_ban1.rows[x].cells[y].innerText = get_pieces_check(g.innerText);
                                    return;
                                }
                            }
                        }
                    }
                    if (g.style.transform === "rotate(0deg)") {
                        for (var x = 0; x < 5; x++) {
                            for (var y = 0; y < 5; y++) {
                                if (My_ban2.rows[x].cells[y].innerText === "") {
                                    My_ban2.rows[x].cells[y].innerText = get_pieces_check(g.innerText);
                                    return;
                                }
                            }
                        }
                    }
                }
            }//

            function get_pieces_check(n) {

                if (n === "と") {
                    return n = "歩"
                }
                if (n === "龍") {
                    return n = "飛"
                }
                if (n === "竜") {
                    return n = "角"
                }
                return n
            }
            //持ち駒から使う処理
            socket.on("own_piece_response", (x, y, own_piece_id) => {
                click_step++
                if (click_step === 1) {
                    if (own_piece_id === "field_1") {
                        My_ban1.rows[x].cells[y].style.backgroundColor = '#CCFFFF';
                        My_ban1.rows[x].cells[y].id = "field_td1";
                        first_choice_piece = My_ban1.rows[x].cells[y]
                        console.log(first_choice_piece)
                    }
                    if (own_piece_id === "field_2") {
                        My_ban2.rows[x].cells[y].style.backgroundColor = '#CCFFFF';
                        My_ban2.rows[x].cells[y].id = "field_td2";
                        first_choice_piece = My_ban2.rows[x].cells[y]
                        console.log(first_choice_piece)
                    }
                }
            })
            //ボタンをclickしたらなる処理
            socket.on("button_response", () => {
                saveonce2.innerText = naru(saveonce)
                saveonce2.style.color = '#f00';
                button.innerText = "";
                button2.innerText = "";
                button.style.display = 'none';
                button2.style.display = 'none';

            })
            socket.on("button_response2", () => {
                button.innerText = "";
                button2.innerText = "";
                button.style.display = 'none';
                button2.style.display = 'none';
            })
            socket.on("discon", () => {
                alert("ほかのプレイヤーが離脱されました!3秒後にリダイレクトします!")
                setTimeout(() => {
                    redirectfnc();
                }, 3000);

            })

            function redirectfnc() {
                window.location.href = '/'; // ここにリダイレクト先のURLを指定
            }
        });




    </script>
</body>

</html>